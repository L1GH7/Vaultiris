# A simple GATT server to test a silent pairing issue in Android 
# Alwen Tiu,  2020

import sys
import dbus, dbus.exceptions, dbus.mainloop.glib
from gi.repository import GLib
from gatt_advert import Advertisement
from gatt_advert import register_ad_cb, register_ad_error_cb
from gatt_server import Service, Characteristic, Descriptor, CharacteristicUserDescriptionDescriptor
from gatt_server import register_app_cb, register_app_error_cb
 
BLUEZ_SERVICE_NAME =           'org.bluez'
DBUS_OM_IFACE =                'org.freedesktop.DBus.ObjectManager'
LE_ADVERTISING_MANAGER_IFACE = 'org.bluez.LEAdvertisingManager1'
GATT_MANAGER_IFACE =           'org.bluez.GattManager1'
GATT_CHRC_IFACE =              'org.bluez.GattCharacteristic1'
DBUS_PROP_IFACE =    	       'org.freedesktop.DBus.Properties'

# replace with the unique UUID of your app
COVIDSAFE_UUID =               '12345567-1595-4f6a-80f0-fe094cc218f9'
LOCAL_NAME =                   'test-server'

mainloop = None

payloadstr= 'Testing silent pairing'

payload=payloadstr.encode('ascii') 

class CovidsafeEncryptCharacteristic(Characteristic):

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                COVIDSAFE_UUID,
                ['encrypt-authenticated-read', 'encrypt-authenticated-write'],
                service)
        self.value = payload


    def ReadValue(self, options):
        print('Covidsafe Encrypt Characteristic Read: ' + repr(self.value))
        return self.value

    def WriteValue(self, value, options):
        print('Covidsafe Encrypt Characteristic Write: ' + repr(value))
        self.value = value

 
class CovidsafeService(Service):
    def __init__(self, bus, index):
        Service.__init__(self, bus, index, COVIDSAFE_UUID, True)
        self.add_characteristic(CovidsafeEncryptCharacteristic(bus, 0, self))
 
class Application(dbus.service.Object):
    def __init__(self, bus):
        self.path = '/'
        self.services = []
        dbus.service.Object.__init__(self, bus, self.path)
 
    def get_path(self):
        return dbus.ObjectPath(self.path)
 
    def add_service(self, service):
        self.services.append(service)
 
    @dbus.service.method(DBUS_OM_IFACE, out_signature='a{oa{sa{sv}}}')
    def GetManagedObjects(self):
        response = {}
        for service in self.services:
            response[service.get_path()] = service.get_properties()
            chrcs = service.get_characteristics()
            for chrc in chrcs:
                response[chrc.get_path()] = chrc.get_properties()
        return response
 
class CovidsafeApplication(Application):
    def __init__(self, bus):
        Application.__init__(self, bus)
        self.add_service(CovidsafeService(bus, 0))

class CovidsafeAdvertisement(Advertisement):

    # modify manufacturer data if needed. some apps scan for specific manufacturer data 
    # before initiating a connection
 
    def __init__(self, bus, index):
        Advertisement.__init__(self, bus, index, 'peripheral')
        self.add_service_uuid(COVIDSAFE_UUID)
        self.add_manufacturer_data(0x03ff, [0x55, 0x44, 0x33])
        # self.add_local_name(LOCAL_NAME)
        self.include_tx_power = True
        # self.add_data(0x26, [0x01, 0x01, 0x00])

 
def find_adapter(bus):
    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'),
                               DBUS_OM_IFACE)
    objects = remote_om.GetManagedObjects()
    for o, props in objects.items():
        if LE_ADVERTISING_MANAGER_IFACE in props and GATT_MANAGER_IFACE in props:
            return o
        print('Skip adapter:', o)
    return None
 
def main():
    global mainloop
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()
    adapter = find_adapter(bus)
    if not adapter:
        print('BLE adapter not found')
        return
 
    service_manager = dbus.Interface(
                                bus.get_object(BLUEZ_SERVICE_NAME, adapter),
                                GATT_MANAGER_IFACE)
    ad_manager = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, adapter),
                                LE_ADVERTISING_MANAGER_IFACE)
 
    app = CovidsafeApplication(bus)
    adv = CovidsafeAdvertisement(bus, 0)
 
    mainloop = GLib.MainLoop()
 
    service_manager.RegisterApplication(app.get_path(), {},
                                        reply_handler=register_app_cb,
                                        error_handler=register_app_error_cb)
    ad_manager.RegisterAdvertisement(adv.get_path(), {},
                                     reply_handler=register_ad_cb,
                                     error_handler=register_ad_error_cb)
    try:
        mainloop.run()
    except KeyboardInterrupt:
        adv.Release()
 
if __name__ == '__main__':
    main()
