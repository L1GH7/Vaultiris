#include "socket.h"
#include "server.h"
#include <stdio.h>

uint64_t g_system_process;
uint64_t g_system_pml4;




uint32_t server_initialize(void)
{
	unsigned char b_get_proc_address[] = {
		0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0xD1, 0x4C, 0x8B, 0x40, 0x18, 0x8B, 0x42, 0x08, 0x4D,
		0x8B, 0x48, 0x20, 0x85, 0xC0, 0x74, 0x0E, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x4D, 0x8B, 0x09, 0x48, 0x83, 0xE8, 0x01, 0x75,
		0xF7, 0x4D, 0x8B, 0x49, 0x20, 0x41, 0x0F, 0xB7, 0x41, 0x3C, 0x42, 0x8B, 0x8C, 0x08, 0x88, 0x00, 0x00, 0x00, 0x8B, 0x42,
		0x0C, 0x42, 0x2B, 0x44, 0x09, 0x10, 0x42, 0x8B, 0x4C, 0x09, 0x1C, 0x49, 0x03, 0xC9, 0x44, 0x8B, 0x04, 0x81, 0x41, 0x0F,
		0xB7, 0x02, 0x4D, 0x03, 0xC1, 0x4E, 0x89, 0x04, 0x10, 0x66, 0x41, 0x83, 0x02, 0x08, 0xC3
	} ;
	unsigned char b_set_system_process[] = {
		0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x54, 0x41, 0x55,
		0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0xBD, 0x20, 0x6A, 0x56, 0x74, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x8B,
		0xF2, 0x48, 0x8B, 0xF9, 0xFF, 0xD5, 0x33, 0xD2, 0x48, 0x8B, 0xC8, 0x49, 0xBC, 0xC0, 0xDD, 0xA5, 0x74, 0xFE, 0x7F, 0x00,
		0x00, 0x44, 0x8D, 0x42, 0x20, 0x41, 0xFF, 0xD4, 0x41, 0xB8, 0x20, 0x00, 0x00, 0x00, 0x49, 0xBF, 0xF0, 0x80, 0xAD, 0x71,
		0xFE, 0x7F, 0x00, 0x00, 0x4D, 0x8B, 0xCF, 0x48, 0x8B, 0xD0, 0x49, 0xBD, 0xF0, 0x60, 0xAD, 0x74, 0xFE, 0x7F, 0x00, 0x00,
		0x48, 0x8B, 0xD8, 0x41, 0x8D, 0x48, 0xF0, 0x41, 0xFF, 0xD5, 0x49, 0xBE, 0xF0, 0x59, 0x56, 0x74, 0xFE, 0x7F, 0x00, 0x00,
		0x3D, 0x04, 0x00, 0x00, 0xC0, 0x75, 0x6C, 0xA1, 0xF0, 0x80, 0xAD, 0x71, 0xFE, 0x7F, 0x00, 0x00, 0x05, 0x00, 0x20, 0x00,
		0x00, 0xA3, 0xF0, 0x80, 0xAD, 0x71, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD5, 0x48, 0x8B, 0xC8, 0x4C, 0x8B, 0xC3, 0x33, 0xD2,
		0x41, 0xFF, 0xD6, 0x41, 0x8B, 0x1F, 0xFF, 0xD5, 0x48, 0x8B, 0xC8, 0x44, 0x8B, 0xC3, 0x33, 0xD2, 0x41, 0xFF, 0xD4, 0x45,
		0x8B, 0x07, 0x45, 0x33, 0xC9, 0x48, 0x8B, 0xD0, 0x48, 0x8B, 0xD8, 0x41, 0x8D, 0x49, 0x10, 0x41, 0xFF, 0xD5, 0x85, 0xC0,
		0x75, 0x21, 0x48, 0x8B, 0x43, 0x10, 0x48, 0xA3, 0xF0, 0x90, 0xAD, 0x71, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD5, 0x48, 0x8B,
		0xC8, 0x4C, 0x8B, 0xC3, 0x33, 0xD2, 0x41, 0xFF, 0xD6, 0x66, 0x83, 0x07, 0x08, 0xEB, 0x16, 0xFF, 0xD5, 0x48, 0x8B, 0xC8,
		0x4C, 0x8B, 0xC3, 0x33, 0xD2, 0x41, 0xFF, 0xD6, 0x33, 0xC0, 0xC6, 0x47, 0x03, 0x00, 0x66, 0x89, 0x06, 0x48, 0x8B, 0x5C,
		0x24, 0x50, 0x48, 0x8B, 0x6C, 0x24, 0x58, 0x48, 0x8B, 0x74, 0x24, 0x60, 0x48, 0x83, 0xC4, 0x20, 0x41, 0x5F, 0x41, 0x5E,
		0x41, 0x5D, 0x41, 0x5C, 0x5F, 0xC3
	} ;
	unsigned char b_open_device[] = {
		0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x89, 0x7C, 0x24, 0x20,
		0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x60, 0x66, 0x83, 0x7A, 0x10, 0x00, 0x48, 0x8D, 0x6A, 0x10, 0x4C,
		0x8B, 0xFA, 0x4C, 0x8B, 0xF1, 0x48, 0x8B, 0xDD, 0x74, 0x0A, 0x48, 0x83, 0xC3, 0x02, 0x66, 0x83, 0x3B, 0x00, 0x75, 0xF6,
		0x49, 0xBC, 0x20, 0x6A, 0x56, 0x74, 0xFE, 0x7F, 0x00, 0x00, 0x41, 0xFF, 0xD4, 0x33, 0xD2, 0x48, 0x8B, 0xC8, 0x48, 0xBF,
		0xC0, 0xDD, 0xA5, 0x74, 0xFE, 0x7F, 0x00, 0x00, 0x44, 0x8D, 0x42, 0x10, 0xFF, 0xD7, 0x48, 0x8B, 0xF0, 0x41, 0xFF, 0xD4,
		0x33, 0xD2, 0x48, 0x8B, 0xC8, 0x44, 0x8D, 0x42, 0x30, 0xFF, 0xD7, 0x48, 0x89, 0x6E, 0x08, 0x49, 0x2B, 0xDF, 0x33, 0xED,
		0x48, 0x83, 0xEB, 0x10, 0x89, 0x6C, 0x24, 0x50, 0x48, 0x8B, 0xF8, 0x48, 0x89, 0x6C, 0x24, 0x48, 0x4C, 0x8B, 0xC8, 0xC7,
		0x44, 0x24, 0x40, 0x60, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0xC0, 0xC7, 0x44, 0x24, 0x38, 0x03, 0x00, 0x00, 0x00, 0xBA, 0x00,
		0x00, 0x10, 0xC0, 0x48, 0xD1, 0xFB, 0x66, 0x03, 0xDB, 0x89, 0x6C, 0x24, 0x30, 0x66, 0x89, 0x1E, 0x66, 0x83, 0xC3, 0x02,
		0x66, 0x89, 0x5E, 0x02, 0xC7, 0x00, 0x30, 0x00, 0x00, 0x00, 0x48, 0x89, 0x68, 0x08, 0x89, 0x68, 0x18, 0x48, 0x89, 0x70,
		0x10, 0x48, 0x89, 0x68, 0x20, 0x48, 0x89, 0x68, 0x28, 0x48, 0xB8, 0xD0, 0x64, 0x9C, 0x64, 0xF8, 0x7F, 0x00, 0x00, 0x49,
		0x8B, 0x4F, 0x08, 0xC7, 0x44, 0x24, 0x28, 0x80, 0x00, 0x00, 0x00, 0x48, 0x89, 0x6C, 0x24, 0x20, 0xFF, 0xD0, 0x8B, 0xD8,
		0x41, 0xFF, 0xD4, 0x4C, 0x8B, 0xC6, 0x48, 0x8B, 0xC8, 0x48, 0xBE, 0xF0, 0x59, 0x56, 0x74, 0xFE, 0x7F, 0x00, 0x00, 0x33,
		0xD2, 0xFF, 0xD6, 0x41, 0xFF, 0xD4, 0x48, 0x8B, 0xC8, 0x4C, 0x8B, 0xC7, 0x33, 0xD2, 0xFF, 0xD6, 0x85, 0xDB, 0x74, 0x0B,
		0x41, 0xC7, 0x06, 0x04, 0x00, 0x01, 0x00, 0x66, 0x41, 0x89, 0x2F, 0x4C, 0x8D, 0x5C, 0x24, 0x60, 0x49, 0x8B, 0x5B, 0x20,
		0x49, 0x8B, 0x6B, 0x28, 0x49, 0x8B, 0x73, 0x30, 0x49, 0x8B, 0x7B, 0x38, 0x49, 0x8B, 0xE3, 0x41, 0x5F, 0x41, 0x5E, 0x41,
		0x5C, 0xC3
	} ;
/*
	unsigned char b_amd[] = {
		0x5C, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x41, 0x00, 0x4D, 0x00,
		0x44, 0x00, 0x52, 0x00, 0x79, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00,
		0x65, 0x00, 0x72, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00
	} ;*/
	

	
	unsigned char b_amd[] = {
		0x5C, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x41, 0x00, 0x4D, 0x00,
		0x44, 0x00, 0x52, 0x00, 0x79, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00,
		0x65, 0x00, 0x72, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x56, 0x00, 0x31, 0x00,
		0x36, 0x00, 0x00, 0x00
	} ;



	unsigned char b_logitech[] = {
		0x5C, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x5C, 0x00, 0x52, 0x00, 0x4F, 0x00, 0x4F, 0x00, 0x54, 0x00, 0x23, 0x00, 0x53, 0x00,
		0x59, 0x00, 0x53, 0x00, 0x54, 0x00, 0x45, 0x00, 0x4D, 0x00, 0x23, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
		0x23, 0x00, 0x7B, 0x00, 0x31, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x30, 0x00, 0x35, 0x00, 0x63, 0x00, 0x30, 0x00,
		0x2D, 0x00, 0x63, 0x00, 0x33, 0x00, 0x37, 0x00, 0x38, 0x00, 0x2D, 0x00, 0x34, 0x00, 0x31, 0x00, 0x62, 0x00, 0x39, 0x00,
		0x2D, 0x00, 0x39, 0x00, 0x63, 0x00, 0x65, 0x00, 0x66, 0x00, 0x2D, 0x00, 0x64, 0x00, 0x66, 0x00, 0x31, 0x00, 0x61, 0x00,
		0x62, 0x00, 0x61, 0x00, 0x38, 0x00, 0x32, 0x00, 0x62, 0x00, 0x30, 0x00, 0x31, 0x00, 0x35, 0x00, 0x7D, 0x00, 0x00, 0x00
	} ;
	unsigned char b_copy_pml4[] = {
		0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xEC, 0x50, 0x48, 0xBF, 0xC9, 0xDD, 0xA9,
		0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0xBE, 0x20, 0x6A, 0x56, 0x74, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x8B, 0x3F, 0xFF, 0xD6,
		0x33, 0xD2, 0x48, 0x8B, 0xC8, 0x48, 0xB8, 0xC0, 0xDD, 0xA5, 0x74, 0xFE, 0x7F, 0x00, 0x00, 0x44, 0x8D, 0x42, 0x14, 0xFF,
		0xD0, 0xC7, 0x44, 0x24, 0x48, 0x14, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xD8, 0x48, 0x89, 0x44, 0x24, 0x40, 0x45, 0x33, 0xC9,
		0xC7, 0x44, 0x24, 0x38, 0x0C, 0x00, 0x00, 0x00, 0x45, 0x33, 0xC0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x33, 0xD2, 0x48, 0xC7,
		0x00, 0xA0, 0x10, 0x00, 0x00, 0x48, 0x8B, 0xCF, 0xC7, 0x40, 0x08, 0x08, 0x00, 0x00, 0x00, 0x48, 0xB8, 0xC8, 0xDD, 0xA9,
		0x79, 0xFE, 0x7F, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x28, 0x08, 0x2F, 0x11, 0x81, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xB8,
		0x10, 0x5B, 0x9C, 0x64, 0xF8, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0x8B, 0x43, 0x0C, 0x48, 0xA3, 0xC7, 0xDD, 0xA9, 0x79,
		0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD6, 0x48, 0x8B, 0xC8, 0x4C, 0x8B, 0xC3, 0x48, 0xB8, 0xF0, 0x59, 0x56, 0x74, 0xFE, 0x7F,
		0x00, 0x00, 0x33, 0xD2, 0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x8B, 0x74, 0x24, 0x68, 0x48, 0x83, 0xC4, 0x50, 0x5F, 0x48,
		0xFF, 0xE0
	} ;
	unsigned char b_copy_memory[] = {
		0x48, 0x83, 0xEC, 0x58, 0x48, 0x8B, 0xC1, 0x48, 0xB9, 0x00, 0x00, 0x38, 0x1F, 0x04, 0x00, 0x00, 0x00, 0x48, 0x3B, 0xC1,
		0x0F, 0x87, 0x83, 0x00, 0x00, 0x00, 0x49, 0xB8, 0xD3, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0xB9, 0xC9, 0xDD,
		0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x45, 0x33, 0xC9, 0x48, 0x8B, 0x09, 0x48, 0xA3, 0xC7, 0xDD, 0xA9, 0x79, 0xFE, 0x7F,
		0x00, 0x00, 0x8B, 0xC2, 0xA3, 0xCF, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x8D, 0x42, 0x0C, 0x89, 0x44, 0x24, 0x48,
		0x48, 0xB8, 0xC7, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x40, 0x8B, 0xD2, 0x49, 0x03, 0xD0,
		0xC7, 0x44, 0x24, 0x38, 0x0C, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x30, 0x45, 0x33, 0xC0, 0xC7, 0x44, 0x24, 0x28,
		0x08, 0x2F, 0x11, 0x81, 0x48, 0xB8, 0x10, 0x5B, 0x9C, 0x64, 0xF8, 0x7F, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x20, 0x33,
		0xD2, 0xFF, 0xD0, 0x33, 0xC9, 0x85, 0xC0, 0x0F, 0x94, 0xC1, 0x8B, 0xC1, 0x48, 0x83, 0xC4, 0x58, 0xC3, 0x33, 0xC0, 0x48,
		0x83, 0xC4, 0x58, 0xC3
	} ;
	unsigned char b_translate[] = {
		0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xEC, 0x20,
		0x48, 0x8B, 0xC2, 0x48, 0x8B, 0xDA, 0x48, 0xC1, 0xE8, 0x27, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x25, 0xFF, 0x01, 0x00, 0x00,
		0x48, 0xBD, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x8D, 0x0C, 0xC1, 0xFF, 0xD5, 0x85, 0xC0, 0x0F, 0x84,
		0xC5, 0x00, 0x00, 0x00, 0x48, 0xBF, 0xD3, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0x48, 0xC1, 0xE9,
		0x1E, 0x48, 0xBE, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x81, 0xE1, 0xFF, 0x01, 0x00, 0x00, 0xBA, 0x08, 0x00,
		0x00, 0x00, 0x48, 0x8B, 0x07, 0x48, 0x23, 0xC6, 0x48, 0x8D, 0x0C, 0xC8, 0xFF, 0xD5, 0x85, 0xC0, 0x0F, 0x84, 0x8B, 0x00,
		0x00, 0x00, 0x48, 0x8B, 0x0F, 0x84, 0xC9, 0x79, 0x18, 0x48, 0xB8, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x0F, 0x00, 0x81,
		0xE3, 0xFF, 0xFF, 0xFF, 0x3F, 0x48, 0x23, 0xC1, 0x48, 0x03, 0xC3, 0xEB, 0x6E, 0x48, 0x23, 0xCE, 0x48, 0x8B, 0xC3, 0x48,
		0xC1, 0xE8, 0x15, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x25, 0xFF, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x0C, 0xC1, 0xFF, 0xD5, 0x85,
		0xC0, 0x74, 0x4E, 0x48, 0x8B, 0x0F, 0x84, 0xC9, 0x79, 0x18, 0x48, 0xB8, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
		0x81, 0xE3, 0xFF, 0xFF, 0x1F, 0x00, 0x48, 0x23, 0xC1, 0x48, 0x03, 0xC3, 0xEB, 0x31, 0x48, 0x23, 0xCE, 0x48, 0x8B, 0xC3,
		0x48, 0xC1, 0xE8, 0x0C, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x25, 0xFF, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x0C, 0xC1, 0xFF, 0xD5,
		0x85, 0xC0, 0x74, 0x11, 0x48, 0x8B, 0x07, 0x81, 0xE3, 0xFF, 0x0F, 0x00, 0x00, 0x48, 0x23, 0xC6, 0x48, 0x03, 0xC3, 0xEB,
		0x02, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0x6C, 0x24, 0x38, 0x48, 0x8B, 0x74, 0x24, 0x40, 0x48, 0x83,
		0xC4, 0x20, 0x5F, 0xC3
	} ;
	unsigned char b_vmcopy[] = {
		0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xFA, 0x48, 0x8B, 0xD9, 0x48, 0x8B, 0x52, 0x10,
		0x48, 0xB8, 0xC7, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x8B, 0x4F, 0x08, 0xFF, 0xD0, 0x8B, 0x57, 0x18, 0x48,
		0x8B, 0xC8, 0x48, 0xB8, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x0B, 0x48, 0xBA, 0xC6,
		0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x88, 0x43, 0x03, 0x48, 0x03, 0xCB, 0x44, 0x8B, 0x47, 0x18, 0x48, 0xB8, 0xC5,
		0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x47, 0x18, 0x33, 0xD2, 0x66, 0x01, 0x03, 0x48, 0xB9,
		0xC1, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x44, 0x8B, 0x47, 0x18, 0x48, 0xB8, 0xC0, 0xC2, 0x9C, 0x64, 0xF8, 0x7F,
		0x00, 0x00, 0x41, 0x83, 0xC0, 0x0C, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0x48, 0xFF, 0xE0
	} ;
	unsigned char b_vmcopy_p32[] = {
		0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x0F, 0xB7, 0x42, 0x04, 0x48, 0x8B, 0xFA, 0x44, 0x0F, 0xB7,
		0x01, 0x48, 0x8B, 0xD9, 0x4C, 0x2B, 0xC0, 0x41, 0x8B, 0x04, 0x08, 0x48, 0x01, 0x42, 0x10, 0x48, 0xB8, 0xC7, 0xDD, 0xA9,
		0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x8B, 0x52, 0x10, 0x48, 0x8B, 0x4F, 0x08, 0xFF, 0xD0, 0x8B, 0x57, 0x18, 0x48, 0x8B,
		0xC8, 0x48, 0xB8, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x0B, 0x48, 0xBA, 0xC6, 0xDD,
		0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x88, 0x43, 0x03, 0x48, 0x03, 0xCB, 0x44, 0x8B, 0x47, 0x18, 0x48, 0xB8, 0xC5, 0xDD,
		0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x47, 0x18, 0x33, 0xD2, 0x66, 0x01, 0x03, 0x48, 0xB9, 0xC1,
		0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x44, 0x8B, 0x47, 0x18, 0x48, 0xB8, 0xC0, 0xC2, 0x9C, 0x64, 0xF8, 0x7F, 0x00,
		0x00, 0x41, 0x83, 0xC0, 0x0C, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0x48, 0xFF, 0xE0
	} ;
	unsigned char b_vmcopy_p64[] = {
		0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x0F, 0xB7, 0x42, 0x04, 0x48, 0x8B, 0xFA, 0x44, 0x0F, 0xB7,
		0x01, 0x48, 0x8B, 0xD9, 0x4C, 0x2B, 0xC0, 0x49, 0x8B, 0x04, 0x08, 0x48, 0x01, 0x42, 0x10, 0x48, 0xB8, 0xC7, 0xDD, 0xA9,
		0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x8B, 0x52, 0x10, 0x48, 0x8B, 0x4F, 0x08, 0xFF, 0xD0, 0x8B, 0x57, 0x18, 0x48, 0x8B,
		0xC8, 0x48, 0xB8, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x0B, 0x48, 0xBA, 0xC6, 0xDD,
		0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x88, 0x43, 0x03, 0x48, 0x03, 0xCB, 0x44, 0x8B, 0x47, 0x18, 0x48, 0xB8, 0xC5, 0xDD,
		0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x47, 0x18, 0x33, 0xD2, 0x66, 0x01, 0x03, 0x48, 0xB9, 0xC1,
		0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x44, 0x8B, 0x47, 0x18, 0x48, 0xB8, 0xC0, 0xC2, 0x9C, 0x64, 0xF8, 0x7F, 0x00,
		0x00, 0x41, 0x83, 0xC0, 0x0C, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0x48, 0xFF, 0xE0
	} ;
	unsigned char b_vmcopy64[] = {
		0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xC2, 0x48, 0x8B, 0xD9, 0x48, 0x8B, 0x52, 0x10, 0x48, 0x8B, 0x48, 0x08,
		0x48, 0xB8, 0xC7, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0x8B, 0xC8, 0xBA, 0x08, 0x00, 0x00, 0x00,
		0x48, 0xB8, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x0B, 0x48, 0xBA, 0xC6, 0xDD, 0xA9,
		0x79, 0xFE, 0x7F, 0x00, 0x00, 0x88, 0x43, 0x03, 0x48, 0x03, 0xCB, 0x48, 0xB8, 0xC5, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00,
		0x00, 0x41, 0xB8, 0x08, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x66, 0x83, 0x03, 0x08, 0x33, 0xD2, 0x48, 0xB9, 0xC1, 0xDD, 0xA9,
		0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0xB8, 0xC0, 0xC2, 0x9C, 0x64, 0xF8, 0x7F, 0x00, 0x00, 0x44, 0x8D, 0x42, 0x14, 0x48,
		0x83, 0xC4, 0x20, 0x5B, 0x48, 0xFF, 0xE0
	} ;
	unsigned char b_vmcopy64_p32[] = {
		0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x0F, 0xB7, 0x42, 0x04, 0x4C, 0x8B, 0xCA, 0x44, 0x0F, 0xB7, 0x01, 0x48, 0x8B, 0xD9,
		0x4C, 0x2B, 0xC0, 0x41, 0x8B, 0x04, 0x08, 0x48, 0x01, 0x42, 0x10, 0x48, 0xB8, 0xC7, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00,
		0x00, 0x48, 0x8B, 0x52, 0x10, 0x49, 0x8B, 0x49, 0x08, 0xFF, 0xD0, 0x48, 0x8B, 0xC8, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x48,
		0xB8, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x0B, 0x48, 0xBA, 0xC6, 0xDD, 0xA9, 0x79,
		0xFE, 0x7F, 0x00, 0x00, 0x88, 0x43, 0x03, 0x48, 0x03, 0xCB, 0x48, 0xB8, 0xC5, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00,
		0x41, 0xB8, 0x08, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x66, 0x83, 0x03, 0x08, 0x33, 0xD2, 0x48, 0xB9, 0xC1, 0xDD, 0xA9, 0x79,
		0xFE, 0x7F, 0x00, 0x00, 0x48, 0xB8, 0xC0, 0xC2, 0x9C, 0x64, 0xF8, 0x7F, 0x00, 0x00, 0x44, 0x8D, 0x42, 0x14, 0x48, 0x83,
		0xC4, 0x20, 0x5B, 0x48, 0xFF, 0xE0
	} ;
	unsigned char b_vmcopy64_p64[] = {
		0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x0F, 0xB7, 0x42, 0x04, 0x4C, 0x8B, 0xCA, 0x44, 0x0F, 0xB7, 0x01, 0x48, 0x8B, 0xD9,
		0x4C, 0x2B, 0xC0, 0x49, 0x8B, 0x04, 0x08, 0x48, 0x01, 0x42, 0x10, 0x48, 0xB8, 0xC7, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00,
		0x00, 0x48, 0x8B, 0x52, 0x10, 0x49, 0x8B, 0x49, 0x08, 0xFF, 0xD0, 0x48, 0x8B, 0xC8, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x48,
		0xB8, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x0B, 0x48, 0xBA, 0xC6, 0xDD, 0xA9, 0x79,
		0xFE, 0x7F, 0x00, 0x00, 0x88, 0x43, 0x03, 0x48, 0x03, 0xCB, 0x48, 0xB8, 0xC5, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00,
		0x41, 0xB8, 0x08, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x66, 0x83, 0x03, 0x08, 0x33, 0xD2, 0x48, 0xB9, 0xC1, 0xDD, 0xA9, 0x79,
		0xFE, 0x7F, 0x00, 0x00, 0x48, 0xB8, 0xC0, 0xC2, 0x9C, 0x64, 0xF8, 0x7F, 0x00, 0x00, 0x44, 0x8D, 0x42, 0x14, 0x48, 0x83,
		0xC4, 0x20, 0x5B, 0x48, 0xFF, 0xE0
	} ;
	unsigned char b_move_mouse[] = {
		0x53, 0x48, 0x83, 0xEC, 0x58, 0x33, 0xC0, 0x48, 0x83, 0xC2, 0x04, 0x48, 0x8B, 0xD9, 0x89, 0x44, 0x24, 0x48, 0x48, 0xB9,
		0xC9, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x40, 0x45, 0x33, 0xC9, 0xC7, 0x44, 0x24, 0x38,
		0x05, 0x00, 0x00, 0x00, 0x48, 0xB8, 0xC8, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x30, 0x45,
		0x33, 0xC0, 0x48, 0x8B, 0x09, 0x33, 0xD2, 0xC7, 0x44, 0x24, 0x28, 0x10, 0x20, 0x2A, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20,
		0x48, 0xB8, 0x10, 0x5B, 0x9C, 0x64, 0xF8, 0x7F, 0x00, 0x00, 0xFF, 0xD0, 0x0F, 0xB7, 0x0B, 0x89, 0x04, 0x19, 0x66, 0x83,
		0x03, 0x04, 0x48, 0x83, 0xC4, 0x58, 0x5B, 0xC3
	} ;
	unsigned char b_copy_i64[] = {
		0x0F, 0xB7, 0x11, 0x48, 0xA1, 0xC6, 0xDD, 0xA9, 0x79, 0xFE, 0x7F, 0x00, 0x00, 0x48, 0x89, 0x04, 0x0A, 0x66, 0x83, 0x01,
		0x08, 0xC3
	} ;


	unsigned char b_NtCreateFile[] = { 0x4C, 0x8B, 0xD1, 0xB8, 0x55, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3 };
	unsigned char b_NtDeviceIoControlFile[] = { 0x4C, 0x8B, 0xD1, 0xB8, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3 };
	unsigned char b_NtQuerySystemInformation[] = { 0x4C, 0x8B, 0xD1, 0xB8, 0x36, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3 };

	char payload[1400];
	uint8_t status = 1;
	struct tcp_header *hdr;
	struct tcp_entry *ehdr;

	uint64_t address_NtDeviceIoControlFile;
	uint64_t address_memcpy;
	uint64_t address_memset;
	uint64_t address_HeapAlloc;
	uint64_t address_GetProcessHeap;
	uint64_t address_HeapFree;
	uint64_t heap_memory;
	uint64_t copy_memory;
	uint64_t translate_address;

	hdr = (struct tcp_header*)(payload);
	ehdr = (struct tcp_entry*)(hdr + 1);

	STACK_GET_ADDRESS(ehdr, 0, 0, 15);
	STACK_EXECUTE(hdr, ehdr);
	if (*(uint64_t*)((char *)hdr+4) != 0)
		goto skip;

	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_ADD_FUNCTION(ehdr, b_get_proc_address);
	STACK_ADD_GPA(ehdr, 4, sizeof(struct tcp_entry_address), 1, 2219); /* memcpy */
	STACK_ADD_GPA(ehdr, 4, sizeof(struct tcp_entry_address), 1, 2223); /* memset */
	STACK_ADD_GPA(ehdr, 4, sizeof(struct tcp_entry_address), 1, 701);  /* RtlAllocateHeap */
	STACK_ADD_GPA(ehdr, 4, sizeof(struct tcp_entry_address), 2, 692);  /* GetProcessHeap */
	STACK_ADD_GPA(ehdr, 4, sizeof(struct tcp_entry_address), 2, 841);  /* HeapFree */
	STACK_GET_HEAP(ehdr, sizeof(struct tcp_entry), 3); /* heap memory address */
	STACK_ADD_FUNCTION(ehdr, b_NtCreateFile);
	STACK_ADD_FUNCTION(ehdr, b_NtDeviceIoControlFile);
	STACK_ADD_FUNCTION(ehdr, b_NtQuerySystemInformation);
	STACK_GET_ADDRESS(ehdr, 0, sizeof(struct tcp_entry_address), 5);
	STACK_GET_ADDRESS(ehdr, 0, sizeof(struct tcp_entry_address), 6);
	STACK_GET_ADDRESS(ehdr, 0, 0, 7);
	STACK_EXECUTE(hdr, ehdr);

	address_memcpy = *(uint64_t*)((char *)hdr+4);
	address_memset = *(uint64_t*)((char *)hdr+12);
	address_HeapAlloc = *(uint64_t*)((char *)hdr+20);
	address_GetProcessHeap = *(uint64_t*)((char *)hdr+28);
	address_HeapFree = *(uint64_t*)((char *)hdr+36);
	heap_memory = *(uint64_t*)((char *)hdr+44);

	*(uint64_t*)(b_set_system_process + 0x1c + 2) = address_GetProcessHeap;
	*(uint64_t*)(b_set_system_process + 0x33 + 2) = address_HeapAlloc;
	*(uint64_t*)(b_set_system_process + 0x4a + 2) = heap_memory;
	*(uint64_t*)(b_set_system_process + 0x5a + 2) = *(uint64_t*)((char *)hdr+68);
	*(uint64_t*)(b_set_system_process + 0x6e + 2) = address_HeapFree;
	*(uint64_t*)(b_set_system_process + 0x7f + 1) = heap_memory;
	*(uint64_t*)(b_set_system_process + 0x8d + 1) = heap_memory;
	*(uint64_t*)(b_set_system_process + 0xce + 2) = heap_memory + 4096;

	*(uint64_t*)(b_open_device + 0x3c + 2) = address_GetProcessHeap;
	*(uint64_t*)(b_open_device + 0x4e + 2) = address_HeapAlloc;
	*(uint64_t*)(b_open_device + 0xd1 + 2) = *(uint64_t*)((char *)hdr+52);
	*(uint64_t*)(b_open_device + 0xf9 + 2) = address_HeapFree;

	*(uint64_t*)(b_copy_pml4 + 0x0f + 2) = (heap_memory + 4096 + 8);
	*(uint64_t*)(b_copy_pml4 + 0x19 + 2) = address_GetProcessHeap;
	*(uint64_t*)(b_copy_pml4 + 0x2d + 2) = address_HeapAlloc;
	*(uint64_t*)(b_copy_pml4 + 0x73 + 2) = heap_memory;
	*(uint64_t*)(b_copy_pml4 + 0x8a + 2) = *(uint64_t*)((char *)hdr+60);
	*(uint64_t*)(b_copy_pml4 + 0x9a + 2) = (heap_memory + 4096 + 24);
	*(uint64_t*)(b_copy_pml4 + 0xac + 2) = address_HeapFree;

	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_ADD_FUNCTION(ehdr, b_set_system_process);
	STACK_ADD_FUNCTION(ehdr, b_open_device);
	STACK_ADD_FUNCTION(ehdr, b_copy_pml4);
	STACK_ADD_SYSTEM_PROCESS(ehdr, sizeof(struct tcp_entry), 8);
	STACK_ADD_DEVICE(ehdr, 9, sizeof(struct tcp_entry_device), (uint64_t)(heap_memory + 4096 + 8), b_amd);
	STACK_ADD_DEVICE(ehdr, 9, sizeof(struct tcp_entry_device), (uint64_t)(heap_memory + 4096 + 16), b_logitech);
	STACK_ADD_PML4(ehdr, 0, 10);
	STACK_EXECUTE(hdr, ehdr);
	status = hdr->status;
	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_CLEAR_FUNCTIONS(ehdr, sizeof(struct tcp_entry));
	STACK_ADD_FUNCTION(ehdr, b_NtDeviceIoControlFile);
	STACK_GET_ADDRESS(ehdr, 0, 0, 4);
	STACK_EXECUTE(hdr, ehdr);
	if (status != 1) {
		return 0;
	}

	address_NtDeviceIoControlFile = *(uint64_t*)((char *)hdr+4);
	*(uint64_t*)(b_copy_memory + 0x1A + 2) = heap_memory + 12;
	*(uint64_t*)(b_copy_memory + 0x24 + 2) = (heap_memory + 4096 + 8);
	*(uint64_t*)(b_copy_memory + 0x34 + 2) = heap_memory;
	*(uint64_t*)(b_copy_memory + 0x40 + 1) = heap_memory + 8;
	*(uint64_t*)(b_copy_memory + 0x50 + 2) = heap_memory;
	*(uint64_t*)(b_copy_memory + 0x7C + 2) = address_NtDeviceIoControlFile;

	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_ADD_FUNCTION(ehdr, b_copy_memory);
	STACK_GET_ADDRESS(ehdr, 0, 0, 5);
	STACK_EXECUTE(hdr, ehdr);

	copy_memory = *(uint64_t*)((char *)hdr+4);
	*(uint64_t*)(b_translate + 0x28 + 2) = copy_memory;
	*(uint64_t*)(b_translate + 0x40 + 2) = heap_memory + 12;

	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_ADD_FUNCTION(ehdr, b_translate);
	STACK_GET_ADDRESS(ehdr, 0, 0, 6);
	STACK_EXECUTE(hdr, ehdr);

	translate_address = *(uint64_t*)((char *)hdr+4);

	*(uint64_t*)(b_vmcopy + 0x14 + 2) = translate_address;
	*(uint64_t*)(b_vmcopy + 0x2a + 2) = copy_memory;
	*(uint64_t*)(b_vmcopy + 0x39 + 2) = heap_memory + 12;
	*(uint64_t*)(b_vmcopy + 0x4d + 2) = address_memcpy;
	*(uint64_t*)(b_vmcopy + 0x62 + 2) = heap_memory;
	*(uint64_t*)(b_vmcopy + 0x70 + 2) = address_memset;

	*(uint64_t*)(b_vmcopy_p32 + 0x23 + 2) = translate_address;
	*(uint64_t*)(b_vmcopy_p32 + 0x3d + 2) = copy_memory;
	*(uint64_t*)(b_vmcopy_p32 + 0x4c + 2) = heap_memory + 12;
	*(uint64_t*)(b_vmcopy_p32 + 0x60 + 2) = address_memcpy;
	*(uint64_t*)(b_vmcopy_p32 + 0x75 + 2) = heap_memory;
	*(uint64_t*)(b_vmcopy_p32 + 0x83 + 2) = address_memset;

	*(uint64_t*)(b_vmcopy_p64 + 0x23 + 2) = translate_address;
	*(uint64_t*)(b_vmcopy_p64 + 0x3d + 2) = copy_memory;
	*(uint64_t*)(b_vmcopy_p64 + 0x4c + 2) = heap_memory + 12;
	*(uint64_t*)(b_vmcopy_p64 + 0x60 + 2) = address_memcpy;
	*(uint64_t*)(b_vmcopy_p64 + 0x75 + 2) = heap_memory;
	*(uint64_t*)(b_vmcopy_p64 + 0x83 + 2) = address_memset;

	*(uint64_t*)(b_vmcopy64 + 0x14 + 2) = translate_address;
	*(uint64_t*)(b_vmcopy64 + 0x28 + 2) = copy_memory;
	*(uint64_t*)(b_vmcopy64 + 0x37 + 2) = heap_memory + 12;
	*(uint64_t*)(b_vmcopy64 + 0x47 + 2) = address_memcpy;
	*(uint64_t*)(b_vmcopy64 + 0x5f + 2) = heap_memory;
	*(uint64_t*)(b_vmcopy64 + 0x69 + 2) = address_memset;

	*(uint64_t*)(b_vmcopy64_p32 + 0x1f + 2) = translate_address;
	*(uint64_t*)(b_vmcopy64_p32 + 0x3b + 2) = copy_memory;
	*(uint64_t*)(b_vmcopy64_p32 + 0x4a + 2) = heap_memory + 12;
	*(uint64_t*)(b_vmcopy64_p32 + 0x5a + 2) = address_memcpy;
	*(uint64_t*)(b_vmcopy64_p32 + 0x72 + 2) = heap_memory;
	*(uint64_t*)(b_vmcopy64_p32 + 0x7c + 2) = address_memset;

	*(uint64_t*)(b_vmcopy64_p64 + 0x1f + 2) = translate_address;
	*(uint64_t*)(b_vmcopy64_p64 + 0x3b + 2) = copy_memory;
	*(uint64_t*)(b_vmcopy64_p64 + 0x4a + 2) = heap_memory + 12;
	*(uint64_t*)(b_vmcopy64_p64 + 0x5a + 2) = address_memcpy;
	*(uint64_t*)(b_vmcopy64_p64 + 0x72 + 2) = heap_memory;
	*(uint64_t*)(b_vmcopy64_p64 + 0x7c + 2) = address_memset;

	*(uint64_t*)(b_move_mouse + 0x12 + 2) = heap_memory + 4096 + 16;
	*(uint64_t*)(b_move_mouse + 0x2c + 2) = heap_memory;
	*(uint64_t*)(b_move_mouse + 0x50 + 2) = address_NtDeviceIoControlFile;

	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_ADD_FUNCTION(ehdr, b_vmcopy);
	STACK_ADD_FUNCTION(ehdr, b_vmcopy_p32);
	STACK_ADD_FUNCTION(ehdr, b_vmcopy_p64);
	STACK_ADD_FUNCTION(ehdr, b_vmcopy64);
	STACK_ADD_FUNCTION(ehdr, b_vmcopy64_p32);
	STACK_ADD_FUNCTION(ehdr, b_vmcopy64_p64);
	STACK_ADD_FUNCTION(ehdr, b_move_mouse);
	*(uint64_t*)(b_copy_i64 + 0x03 + 2) = heap_memory + 4096;
	STACK_ADD_FUNCTION(ehdr, b_copy_i64);
	*(uint64_t*)(b_copy_i64 + 0x03 + 2) = heap_memory + 4096 + 24;
	STACK_ADD_FUNCTION(ehdr, b_copy_i64);
	STACK_EMPTY_FUNCTION(ehdr, 0, 1);
	STACK_EXECUTE(hdr, ehdr);
skip:
	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_EMPTY_FUNCTION(ehdr, 0, 14);
	STACK_EXECUTE(hdr, ehdr);
	g_system_process = *(uint64_t*)((char *)hdr+4);
	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_EMPTY_FUNCTION(ehdr, 0, 15);
	STACK_EXECUTE(hdr, ehdr);
	status = hdr->status;
	g_system_pml4 = *(uint64_t*)((char *)hdr+4);

	printf("[+] PsInitialSystemProcess: 0x%llx\n", g_system_process);
	printf("[+] PML4: 0x%llx\n", g_system_pml4);

	return status;
}

uint32_t server_move_mouse(int8_t button, int8_t x, int8_t y, int8_t wheel)
{

	char payload[1400];
	struct tcp_header *hdr;
	struct tcp_entry *ehdr;
	hdr = (struct tcp_header*)(payload);
	ehdr = (struct tcp_entry*)(hdr + 1);
	STACK_ADD_MOUSE(ehdr, 0, button, x, y, wheel);
	STACK_EXECUTE(hdr, ehdr);

	return *(uint32_t*)((char *)hdr+4);
}
